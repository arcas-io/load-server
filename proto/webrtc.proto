syntax = "proto3";
package webrtc;

import "google/protobuf/timestamp.proto";

service WebRtc {
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc StartSession(StartSessionRequest) returns (Empty);
  rpc StopSession(StopSessionRequest) returns (Empty);
  rpc GetStats(GetStatsRequest) returns (GetStatsResponse);
  rpc CreatePeerConnection(CreatePeerConnectionRequest)
      returns (CreatePeerConnectionResponse);
  // PeerConnection methods
  rpc CreateOffer(CreateSDPRequest) returns (CreateSDPResponse);
  rpc CreateAnswer(CreateSDPRequest) returns (CreateSDPResponse);
  rpc SetLocalDescription(SetSDPRequest) returns (SetSDPResponse);
  rpc SetRemoteDescription(SetSDPRequest) returns (SetSDPResponse);
}

// Reusable empty message
message Empty {}

// Create Session
message CreateSessionRequest { string name = 1; }
message CreateSessionResponse { string session_id = 1; }

// Start Session
message StartSessionRequest { string session_id = 1; }

// Stop Session
message StopSessionRequest { string session_id = 1; }

// Get Stats
message GetStatsRequest { string session_id = 1; }
message SessionStats {
  string id = 1;
  string name = 2;
  uint64 num_peer_connections = 3;
  string state = 4;
  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Timestamp stop_time = 6;
  uint64 elapsed_time = 7;
}
message PeerConnectionStat {
  uint32 ssrc = 1;
  uint32 packets_sent = 2;
  uint64 bytes_sent = 3;
  uint32 frames_encoded = 4;
  uint32 key_frames_encoded = 5;
  double total_encode_time = 6;
  uint32 frame_width = 7;
  uint32 frame_height = 8;
  uint64 retransmitted_packets_sent = 9;
  uint64 retransmitted_bytes_sent = 10;
  double total_packet_send_delay = 11;
  uint32 nack_count = 12;
  uint32 fir_count = 13;
  uint32 pli_count = 14;
  uint32 quality_limitation_reason = 15;
  uint32 quality_limitation_resolution_changes = 16;
  int32 remote_packets_lost = 17;
  double remote_jitter = 18;
  double remote_round_trip_time = 19;
}
message PeerConnectionStats {
  string id = 1;
  string name = 2;
  repeated PeerConnectionStat video_sender = 3;
}
message GetStatsResponse {
  SessionStats session = 1;
  repeated PeerConnectionStats peer_connections = 2;
}

// Create PeerConnection
message CreatePeerConnectionRequest {
  string session_id = 1;
  string name = 2;
}
message CreatePeerConnectionResponse { string peer_connection_id = 1; }

message CreateSDPRequest { string session_id = 1; string peer_connection_id = 2; }
message CreateSDPResponse { string session_id = 1; string peer_connection_id = 2; string sdp = 3; } 
message SetSDPRequest { string session_id = 1; string peer_connection_id = 2; string sdp = 3; }
message SetSDPResponse { string session_id = 1; string peer_connection_id = 2; bool success = 3; }
